version: "3.9"
services:
  sql:
    image: postgres:15.1-alpine
    container_name: ${DB_NAME}
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 3s
      timeout: 9s
      retries: 3
    ports:
      - "${DB_PORT}:5432"
    expose:
      - "${DB_PORT}"
    networks:
      - prod_network

  redis:
    image: redis:7.2-rc-alpine
    restart: always
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    environment:
      REDIS_USER: ${REDIS_USER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 1
    ports:
      - "${REDIS_PORT}:6379"
    expose:
      - "${REDIS_PORT}"
    networks:
      - prod_network

  rabbitmq:
    image: "rabbitmq"
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - prod_network

  celery:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      REDIS_USER: ${REDIS_USER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command:  celery -A src.celery.run worker --loglevel INFO -E -B
    depends_on:
      - app
      - rabbitmq
    networks:
      - prod_network

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      REDIS_USER: ${REDIS_USER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8000:8000"
    entrypoint: sh -c "uvicorn src.main:app --host 0.0.0.0 --port 8000"
    networks:
      - prod_network
    depends_on:
      sql:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  prod_network:
    name: prod_network
